{"version":3,"file":"console-menu.js.cjs.production.min.js","sources":["../src/helpers/rendering.ts","../src/structs/menu-item.ts","../src/items/button.ts","../src/items/check-button.ts","../src/classes/console-utils.ts","../src/helpers/formater.ts","../src/structs/menu-core.ts","../src/classes/screen.ts","../src/items/natives/menu-header.ts","../src/items/natives/menu-footer.ts","../src/menus/menu.ts","../src/items/sub-menu.ts","../src/index.ts"],"sourcesContent":["\r\nimport * as ffi from 'ffi-napi';\r\n\r\n\r\n/**\r\n * GetConsoleScreenBufferInfo\r\n * \r\n * dwSize x: offest 0 size 2\r\n * dwSize y: offest 2 size 2\r\n * dwCursorPosition x: offest 4 size 2\r\n * dwCursorPosition y: offest 6 size 2\r\n * wAttributes: offest 8 size 2\r\n * srWindowLeft: offest 10 size 2\r\n * srWindowTop: offest 12 size 2\r\n * srWindowRight: offest 14 size 2\r\n * srWindowBottom: offest 16 size 2\r\n * dwMaximumWindowSize x: offest 18 size 2\r\n * dwMaximumWindowSize y: offest 20 size 2\r\n * \r\n * \r\n */\r\n\r\nexport const kernal = ffi.Library('kernel32', {\r\n    'GetStdHandle': ['int', ['int']],\r\n    'SetConsoleTextAttribute': ['int', ['int', 'int']],\r\n    \"GetConsoleScreenBufferInfo\": ['int', ['int', 'pointer']]\r\n});\r\n\r\n\r\nexport enum Color {\r\n    FOREGROUND_BLUE = 0x0001,\t// Text color contains blue.\r\n    FOREGROUND_GREEN = 0x0002,\t// Text color contains green.\r\n    FOREGROUND_RED = 0x0004,\t// Text color contains red.\r\n    FOREGROUND_INTENSITY = 0x0008,\t// Text color is intensified.\r\n    BACKGROUND_BLUE = 0x0010,\t// Background color contains blue.\r\n    BACKGROUND_GREEN = 0x0020,\t// Background color contains green.\r\n    BACKGROUND_RED = 0x0040,\t// Background color contains red.\r\n    BACKGROUND_INTENSITY = 0x0080,\t// Background color is intensified.\r\n    COMMON_LVB_LEADING_BYTE = 0x0100,\t// Leading byte.\r\n    COMMON_LVB_TRAILING_BYTE = 0x0200,\t// Trailing byte.\r\n    COMMON_LVB_GRID_HORIZONTAL = 0x0400,\t// Top horizontal.\r\n    COMMON_LVB_GRID_LVERTICAL = 0x0800,\t// Left vertical.\r\n    COMMON_LVB_GRID_RVERTICAL = 0x1000,\t// Right vertical.\r\n    COMMON_LVB_REVERSE_VIDEO = 0x4000,\t// Reverse foreground and background attribute.\r\n    COMMON_LVB_UNDERSCORE = 0x8000\t// Underscore.\r\n}\r\n\r\nexport class RenderColor {\r\n\r\n    public static _default_attributes: number = RenderColor.getCurrentColor();\r\n    private _is_applyed: boolean = false;\r\n\r\n    constructor(\r\n        public readonly color: number\r\n    ) { }\r\n\r\n    public static create(color: string | number) {\r\n        return new RenderColor(typeof color === 'string' ? Number(color.split('\u001b[')[1].split('m')[0]) : color)\r\n    }\r\n\r\n    public toString() { // Debug only !!!\r\n        return `[color: ${this.color}]|`;\r\n    }\r\n\r\n    private static getCurrentColor(): number {\r\n        const handle = kernal.GetStdHandle(/** Default Console Handle */ -11);\r\n        \r\n        const buff = Buffer.alloc(22 /** sizeof(CONSOLE_SCREEN_BUFFER_INFO) == 22 */) \r\n\r\n        /** @ts-ignore */\r\n        kernal.GetConsoleScreenBufferInfo(handle, buff);\r\n\r\n        return buff.readInt32LE(8 /** offest in memory */)\r\n    }\r\n\r\n    public static applyColor(color: number) {\r\n        const handle = kernal.GetStdHandle(/** Default Console Handle */ -11);\r\n        \r\n        const buff = Buffer.alloc(22 /** sizeof(CONSOLE_SCREEN_BUFFER_INFO) == 22 */) \r\n\r\n        /** @ts-ignore */\r\n        kernal.GetConsoleScreenBufferInfo(handle, buff);\r\n\r\n        kernal.SetConsoleTextAttribute(handle, color)\r\n\r\n        return buff.readInt32LE(8 /** offest in memory */)\r\n    }\r\n\r\n    public toggle() {\r\n        if (this._is_applyed) {\r\n            this.end()\r\n        } else {\r\n            this.apply()\r\n        }\r\n        this._is_applyed = !this._is_applyed\r\n    }\r\n\r\n    public apply() {\r\n        RenderColor.applyColor(this.color)\r\n    }\r\n\r\n    public end() {\r\n        RenderColor.applyColor(RenderColor._default_attributes)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function byteOnly(n: number) {\r\n    return Math.max(n, -n)\r\n}\r\n\r\nexport function centerString(str: string, width: number) {\r\n    let spaces = byteOnly(\r\n        width - str.length\r\n    ) / 2\r\n    \r\n    return (\r\n        ' '.repeat(spaces + (\r\n                str.length % 2 == 1 ? 1 : 0\r\n            )\r\n        ) +\r\n        str +\r\n        ' '.repeat(spaces)\r\n    )\r\n}","import MenuCore from \"./menu-core\";\r\n\r\n\r\n\r\nexport interface ItemRenderResult {\r\n\r\n}\r\n\r\nexport interface MenuItemProps {\r\n    is_countless: boolean,\r\n    onClicked: (this: MenuItem) => any,\r\n    onKeyDown: (this: MenuItem, key: any) => void,\r\n    disabled: boolean,\r\n}\r\n\r\nexport default abstract class MenuItem<M extends MenuCore = MenuCore> {\r\n\r\n    \r\n    readonly ITEM_TYPE: string = \"DEFAULT_ITEM\";\r\n    protected _is_disabled: boolean = false;\r\n    /** @ts-ignore: Defined afeter calling MenuCore.append() */\r\n    private _id: string;\r\n    /** @ts-ignore: Defined afeter calling MenuCore.append() */\r\n    private _menu: M\r\n\r\n    public readonly propertys: MenuItemProps;\r\n\r\n    public get label() {\r\n        return this._label\r\n    }\r\n\r\n    public set label(value) {\r\n        this._label = value\r\n    }\r\n\r\n    constructor(\r\n        private _label: string,\r\n        propertys: Partial<MenuItemProps> = {}\r\n    ) {\r\n        this.propertys = Object.assign<MenuItemProps, typeof propertys>({\r\n            is_countless: false,\r\n            onClicked: () => {},\r\n            onKeyDown: (key: any) => {},\r\n            disabled: false,\r\n        }, propertys)\r\n\r\n        if(this.propertys.disabled) {\r\n            this.disable()\r\n        } \r\n\r\n    }\r\n\r\n    public get isDisabled() {\r\n        return this._is_disabled;\r\n    }\r\n\r\n    public get menu() {\r\n        if(!this._menu) {\r\n            throw new Error(\"Cannot access `MenuItem.menu` property before append the item to the menu.\");\r\n        }\r\n        return this._menu;\r\n    }\r\n\r\n    public set menu(val: M) {\r\n        if(!this._menu) {\r\n            this._menu = val\r\n        }\r\n    }\r\n\r\n    public get id() {\r\n        return this._id;\r\n    }\r\n\r\n    public set id(val: string) {\r\n        if(!this._id?.length) {\r\n            this._id = val\r\n        }\r\n    }\r\n\r\n    public disable() {\r\n        this._is_disabled = true;\r\n        if(this._menu) {\r\n            this._menu.render();\r\n        }\r\n    }\r\n\r\n    public enable() {\r\n        this._is_disabled = false;\r\n        if(this._menu) {\r\n            this._menu.render();\r\n        }\r\n    }\r\n\r\n    public onKeyDown(key: any) {\r\n        this.propertys.onKeyDown.bind(this)(key);\r\n    }\r\n\r\n    public onClicked(...args: any[]): any {\r\n        /** @ts-ignore */\r\n        return this.propertys.onClicked.bind(this)(...args);\r\n    }\r\n\r\n    /**\r\n     * Render the item\r\n     */\r\n    public render(width: number): string {\r\n        throw new Error(\"`Item.render(width)` Method not implemented.\");\r\n    }\r\n}\r\n\r\n","import { centerString } from \"../helpers/rendering\";\r\nimport MenuItem, { MenuItemProps } from \"../structs/menu-item\";\r\n\r\n\r\n\r\n\r\n\r\nexport interface ButtonProps extends Omit<MenuItemProps, 'onClicked'> {\r\n    onClicked: (this: Button) => void,\r\n}\r\n\r\n\r\nexport default class Button extends MenuItem {\r\n\r\n\r\n    constructor(\r\n        label: string,\r\n        props: Partial<ButtonProps> = {},\r\n    ) { super(label, props as any) };\r\n\r\n    public render(width: number) {\r\n        return centerString(this.label, width); \r\n    }\r\n}","import Menu from \"../menus/menu\";\r\nimport { byteOnly } from \"../helpers/rendering\";\r\nimport MenuItem, { MenuItemProps } from \"../structs/menu-item\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport interface CheckButtonProps extends Omit<MenuItemProps, \"onClicked\"> {\r\n    onClicked: (this: CheckButton, is_checked: boolean) => void;\r\n    checked: boolean;\r\n}\r\n\r\nexport default class CheckButton extends MenuItem<Menu> {\r\n\r\n    private _checked: boolean = false\r\n\r\n    public get checked() {\r\n        return this._checked;\r\n    }\r\n\r\n    constructor(\r\n        label: string,\r\n        props: Partial<CheckButtonProps> = {}\r\n    ) { \r\n        super(label, props as any)\r\n        this._checked = props.checked ?? false\r\n    }\r\n\r\n\r\n    public render(width: number) {\r\n\r\n        const checked = this._checked ? '[X]' : '[ ]'\r\n\r\n        let spaces = byteOnly(\r\n            width - this.label.length\r\n        ) / 2\r\n        \r\n        return (\r\n            ' '.repeat(spaces + (\r\n                this.label.length % 2 == 1 ? 1 : 0\r\n                )\r\n            ) +\r\n            this.label +\r\n            ' '.repeat(spaces - checked.length) + checked\r\n        )\r\n    }\r\n\r\n\r\n    public onClicked() {\r\n        this._checked = !this._checked;\r\n        super.onClicked(this._checked)\r\n    }\r\n}","import { buffer } from \"stream/consumers\";\r\nimport { kernal } from \"../helpers/rendering\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function setCursorPosition(x: number, y: number) {\r\n    process.stdout.cursorTo(x, y);\r\n}\r\n\r\nexport function getCursorPosition(): { x: number, y: number } {\r\n    const handle = kernal.GetStdHandle(/** Default Console Handle */ -11);\r\n    const buff = Buffer.alloc(22 /** sizeof(CONSOLE_SCREEN_BUFFER_INFO) == 22 */)\r\n    \r\n    /** @ts-ignore */\r\n    kernal.GetConsoleScreenBufferInfo(handle, buff);\r\n    \r\n    return { x: buff.readInt16LE(4 /** offest in memory */), y: buff.readInt16LE(6 /** offest in memory */) };\r\n}","\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// format(\"${name} ${age}\", {name: \"John\", age: 34}) // \"John 34\"\r\nexport default function format<T extends object>(data: string, obj: T) {\r\n    return data.replace(/\\{([^\\}]*)\\}/g, (match, key) => {\r\n        /** @ts-ignore */\r\n        return obj[key] ?? \"\"\r\n    })\r\n}","import format from \"../helpers/formater\";\r\nimport MenuItem from \"./menu-item\";\r\n\r\n\r\n\r\nexport interface MenuPropertys {\r\n    \r\n    // Styles\r\n    left_column_style: string\r\n    right_column_style: string\r\n    \r\n    header_style: string\r\n    \r\n    bottom_row_style: string\r\n    between_items_style: string\r\n\r\n    // Padding\r\n    padding: number\r\n    between_items_padding: number\r\n\r\n\r\n    // options\r\n    message_item_selected: boolean, // \"Item {index} selected\"\r\n    message_item_format: string // \"Item ${index} selected\"\r\n\r\n    minimal_width: number\r\n    \r\n\r\n}\r\n\r\nexport default abstract class MenuCore {\r\n\r\n    public static readonly MENU_TYPE: string = \"DEFAULT_MENU\";\r\n    protected readonly propertys: MenuPropertys\r\n    \r\n    protected _selected_item_idx: number = -1\r\n    protected _items: MenuItem[] = []\r\n    protected _message: string = \"\";\r\n    private _message_timeout_tmo: NodeJS.Timeout | undefined;\r\n    \r\n    protected _is_menu_locked: boolean = false;\r\n    protected _is_menu_hidden: boolean = false;\r\n    // protected _screen: Screen = new Screen()\r\n\r\n\r\n    public get current_selected_item(): MenuItem {\r\n        return this._items[this._selected_item_idx];\r\n    }\r\n\r\n    public get selected_item_idx(): number {\r\n        return this._selected_item_idx;\r\n    }\r\n\r\n    constructor(\r\n        propertys: Partial<MenuPropertys> = {}\r\n    ) {\r\n        this.propertys = Object.assign<MenuPropertys, typeof propertys>({\r\n           \r\n            left_column_style: '|',\r\n            right_column_style: '|',\r\n           \r\n            header_style: '-',\r\n            bottom_row_style: '-',\r\n           \r\n            between_items_style: ' ',\r\n           \r\n            padding: 2,\r\n            between_items_padding: 1,\r\n\r\n            message_item_selected: false,\r\n            message_item_format: \"Item ${index} selected\",\r\n\r\n            minimal_width: 5,\r\n\r\n        }, propertys)\r\n    }\r\n\r\n\r\n\r\n\r\n    public showMessage(message: string, timeout: number = -1) {\r\n        this._message = message\r\n        this.render()\r\n        if(timeout > 0) {\r\n            clearTimeout(this._message_timeout_tmo)\r\n            this._message_timeout_tmo = setTimeout(() => {\r\n                this.clearMessage()\r\n                this.render()\r\n            }, timeout)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call this.showMessage(\"\", -1)\r\n     */\r\n    public clearMessage() {\r\n        this.showMessage(\"\", -1)\r\n    }\r\n\r\n    protected _on_key_down(keydat: string | undefined, key: any) {\r\n\r\n        if(this._is_menu_locked) return\r\n\r\n        if(key.name == 'down') {\r\n            this.moveSelection(false)\r\n\r\n            if(this.propertys.message_item_selected)\r\n                this.showMessage( // showMessage will render the menu\r\n                    format(\r\n                        this.propertys.message_item_format,\r\n                        { index: this._selected_item_idx }\r\n                    )\r\n                );\r\n            else this.render();\r\n\r\n        } else if(key.name == 'up') {\r\n            this.moveSelection(true)\r\n        \r\n            if(this.propertys.message_item_selected)\r\n                this.showMessage( // showMessage will render the menu\r\n                    format(\r\n                        this.propertys.message_item_format,\r\n                        { index: this._selected_item_idx }\r\n                    )\r\n                );\r\n            else this.render();\r\n\r\n        }else if(key.name === 'left') {\r\n            if(this.current_selected_item) {\r\n                this.current_selected_item.onClicked()\r\n            }\r\n            this.render()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lock the menu control\r\n     */\r\n    public lock(): void {\r\n        this._is_menu_locked = true;\r\n    }\r\n    \r\n    /**\r\n     * Unlock the menu control\r\n     */\r\n    public unlock(): void {\r\n        this._is_menu_locked = false;\r\n    }\r\n\r\n    public clear() {\r\n        throw new Error(\"`Menu.clear()` Method not implemented.\");\r\n    }\r\n\r\n    protected _hide() {\r\n        throw new Error(\"`Menu._hide()` Method not implemented.\");\r\n    }\r\n\r\n    protected _show() {\r\n        throw new Error(\"`Menu._show()` Method not implemented.\");\r\n    }\r\n\r\n    public hide() {\r\n\r\n        if(!this._is_menu_hidden) {\r\n            this._is_menu_hidden = true;\r\n            this._hide()\r\n        }\r\n    }\r\n\r\n    public show() {\r\n        if(this._is_menu_hidden) {\r\n            this._is_menu_hidden = false;\r\n            this._show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Append new Item\r\n     * @param at Append the item at\r\n     */\r\n    public append(item: MenuItem, at?: number | MenuItem): void {\r\n        if(typeof at == 'number') {\r\n            this._items.splice(at, 0, item);\r\n        } else if(at instanceof MenuItem) {\r\n            this._items.splice(this._items.indexOf(at), 0, item);\r\n        }else {\r\n            this._items.push(item);\r\n        }\r\n\r\n        item.id = item.ITEM_TYPE + \": \" + this._items.indexOf(item);\r\n        item.menu = this\r\n    }\r\n\r\n    /**\r\n     * Remove item from the menu\r\n     */\r\n    public remove(item: MenuItem): void {\r\n        this._items.splice(this._items.indexOf(item), 1);\r\n    }\r\n    \r\n    public moveSelection(up: boolean): void {\r\n\r\n        this._selected_item_idx += up ? -1 : 1;\r\n        if(this._selected_item_idx < 0) {\r\n            this._selected_item_idx = this._items.length - 1;\r\n        } else if(this._selected_item_idx >= this._items.length) {\r\n            this._selected_item_idx = 0;\r\n        }\r\n\r\n        if(this.current_selected_item?.isDisabled) {\r\n            this.moveSelection(up);\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * Disable an item from the menu\r\n     */\r\n    public disable(item: MenuItem | number): void {\r\n        if(typeof item == 'number') {\r\n            item = this._items[item]\r\n        }\r\n\r\n        item?.disable?.();\r\n    }\r\n\r\n    /**\r\n     * Enable an item from the menu\r\n     */\r\n    public enable(item: MenuItem | number): void {\r\n        if(typeof item == 'number') {\r\n            item = this._items[item]\r\n        }\r\n        \r\n        item?.enable?.();\r\n    }\r\n\r\n    /**\r\n     * Is item enabled\r\n     */\r\n    public isEnabled(item: MenuItem | number): boolean {\r\n        if(typeof item == 'number') {\r\n            item = this._items[item]\r\n        }\r\n\r\n        return typeof item?.isDisabled === 'boolean' ? !item?.isDisabled : false;\r\n    }\r\n\r\n    /**\r\n     * Is item disabled\r\n     */\r\n    public isDisabled(item: MenuItem | number): boolean {\r\n        if(typeof item == 'number') {\r\n            item = this._items[item]\r\n        }\r\n\r\n        return typeof item?.isDisabled === 'boolean' ? item?.isDisabled : false;\r\n    }\r\n\r\n    /**\r\n     * Get the current menu index\r\n     */\r\n    public currentItemIndex(): number {\r\n        return this._selected_item_idx;\r\n    }\r\n\r\n    /**\r\n     * Get Item by index\r\n     */\r\n\r\n    public getItem(index: number): MenuItem | undefined {\r\n        return this._items[index];\r\n    }\r\n\r\n\r\n    /**\r\n     * Initialize the menu\r\n     */\r\n    public initialize(...args: any[]): void {\r\n        throw new Error(\"`Menu.render()` Method not implemented.\");\r\n    }\r\n    \r\n    /**\r\n     * Render the menu\r\n     */\r\n    public render(): void {\r\n        throw new Error(\"`Menu.render()` Method not implemented.\");\r\n    }\r\n\r\n}","/**\r\n * TODO: Warp all the `console` methods, to move the cursor to ender the menu and then call the orignal method\r\n */\r\nimport { getCursorPosition, setCursorPosition } from \"./console-utils\";\r\nimport { RenderColor } from '../helpers/rendering'\r\n\r\n// let _flag_c = 0;\r\n// const flag = () => 1 << _flag_c++\r\n// const flag_containt = (flags: number, d: number) => (d & flags) === d\r\n\r\n//const array_same = (a: any[], b: any[]) => a.length === b.length && a.every((v, i) => v === b[i])\r\n\r\n// export enum Flags {\r\n    \r\n\r\n// }\r\n\r\nexport type RenderableLine = [/** flags */ number, (string | [ /** colors flags */ number, /** string to render */ string ])[]] \r\nexport type ScreenBuffer = RenderableLine[]\r\n\r\nexport type ScreenCache = { buffer_cache: number[] }\r\n\r\n\r\nexport interface ScreenOptions {\r\n    cache?: ScreenCache\r\n    curser_under_screen?: boolean\r\n}\r\n\r\nexport default function renderScreenBuffer(buffer: ScreenBuffer, options: ScreenOptions = {}): ScreenCache {\r\n\r\n    let height = 0;\r\n    let mouseY = getCursorPosition().y\r\n\r\n    if(!options.cache) {\r\n        options.cache = { buffer_cache: [] }\r\n    }\r\n\r\n\r\n    const cache_rendered_lines: number[] = []\r\n\r\n    while(height < buffer.length) {\r\n        \r\n        cache_rendered_lines[height] = 0\r\n\r\n        const current_line       = buffer[height]\r\n        // const current_line_flags = current_line[0]\r\n\r\n        let _current_point = -1\r\n\r\n        setCursorPosition(0, height+mouseY)\r\n\r\n        while(current_line[1].length >++ _current_point) {\r\n\r\n            const current_str = current_line[1][_current_point]\r\n            const is_color    = current_str instanceof Array\r\n\r\n            cache_rendered_lines[height] += is_color ? (\r\n                current_str[1].length\r\n            ) : (\r\n                current_str.length\r\n            )\r\n\r\n            if(is_color) {\r\n                /** @ts-ignore: if is_color is true that mean current_str[0] is number */\r\n                RenderColor.applyColor(current_str[0])\r\n            }\r\n\r\n            process.stdout.write(\r\n                /** @ts-ignore: ??? */\r\n                is_color ? current_str[1] : current_str\r\n            )\r\n\r\n            if(is_color) {\r\n                RenderColor.applyColor(RenderColor._default_attributes)\r\n            }\r\n        }\r\n\r\n        if(cache_rendered_lines[height] < options.cache.buffer_cache[height]) {\r\n            process.stdout.write(\r\n                ' '.repeat(\r\n                    options.cache.buffer_cache[height] - cache_rendered_lines[height] + 1\r\n                )\r\n            )\r\n        }\r\n                \r\n        height++;\r\n    }\r\n\r\n    if(cache_rendered_lines.length < options.cache.buffer_cache.length) {\r\n        for(let i = cache_rendered_lines.length; i < options.cache.buffer_cache.length; i++) {\r\n            setCursorPosition(0, height++)\r\n            process.stdout.write(\r\n                ' '.repeat(\r\n                    options.cache.buffer_cache[i]\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    // if(options.curser_under_screen) {\r\n    //     // setCursorPosition(0, buffer.length)\r\n    // }\r\n\r\n    setCursorPosition(0, mouseY);\r\n\r\n    return { buffer_cache: cache_rendered_lines };\r\n}\r\n","import { RenderableLine } from \"../../classes/screen\";\r\nimport { centerString } from \"../../helpers/rendering\";\r\nimport { MenuPropertys } from \"../../structs/menu-core\";\r\nimport MenuItem from \"../../structs/menu-item\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class MenuHeader extends MenuItem {\r\n\r\n    constructor(\r\n        private readonly _label: string\r\n    ) { \r\n        super(\"\")\r\n    }\r\n\r\n    /** @ts-ignore */\r\n    public render(width: number, props: MenuPropertys): [number, RenderableLine, RenderableLine, RenderableLine] {\r\n\r\n        const header_label = centerString(this._label, width)\r\n\r\n        return [\r\n            /** @ts-ignore */\r\n            header_label.length,\r\n\r\n            this._render(\r\n                \"-\".repeat(header_label.length + props.padding * 2),\r\n                props,\r\n                true\r\n            ),\r\n            \r\n            this._render(\r\n                header_label,\r\n                props\r\n            ),\r\n\r\n            this._render(\r\n                \"-\".repeat(header_label.length + (props.padding * 2)),\r\n                props,\r\n                true\r\n            )\r\n        ]\r\n    }\r\n\r\n    private _render(item: string, props: MenuPropertys, _remove_padding?: boolean): RenderableLine {\r\n        return [\r\n            0,\r\n            [\r\n                // The left character of the menu\r\n                props.left_column_style + // \"|\"\r\n\r\n                // The menu padding, before the item\r\n                (_remove_padding ? \"\" : ' '.repeat(props.padding)) +\r\n\r\n                // The selected item render output\r\n                item + // \"  Item  \"\r\n\r\n                // The menu padding, after the item\r\n                (_remove_padding ? \"\" : ' '.repeat(props.padding)) +\r\n                \r\n                // The right character of the menu\r\n                props.right_column_style // \"|\"\r\n            ]\r\n        ]\r\n    }\r\n\r\n}","import { centerString } from \"../../helpers/rendering\";\r\nimport { MenuPropertys } from \"../../structs/menu-core\";\r\nimport MenuItem from \"../../structs/menu-item\";\r\nimport { RenderableLine } from \"../../classes/screen\";\r\nimport wrap from 'word-wrap';\r\n\r\n\r\n\r\n\r\n\r\nexport default class MenuFooter extends MenuItem {\r\n\r\n    constructor(\r\n    ) { \r\n        super(\"\")\r\n    }\r\n\r\n    /** @ts-ignore */\r\n    public render(log: string, width: number, props: MenuPropertys): RenderableLine[] {\r\n\r\n        const footer_labels = wrap(log, { width: width - (props.padding * 2) }).split('\\n').map(lbl => centerString(lbl, width))\r\n        \r\n        /** @ts-ignore */\r\n        let max_length = footer_labels.reduce((prev, cur) => Math.max(prev.length, cur.length)) as number\r\n\r\n        if(typeof max_length === 'string') {\r\n            /** @ts-ignore */\r\n            max_length = max_length.length \r\n        }\r\n\r\n\r\n        return [\r\n            this._render(\r\n                \"-\".repeat(max_length + props.padding * 2),\r\n                props,\r\n                true\r\n            ),\r\n            \r\n            ...footer_labels.map(label => this._render(label, props)),\r\n\r\n            this._render(\r\n                \"-\".repeat(max_length + (props.padding * 2)),\r\n                props,\r\n                true\r\n            )\r\n        ]\r\n    }\r\n\r\n    private _render(item: string, props: MenuPropertys, _remove_padding?: boolean): RenderableLine {\r\n        return [\r\n            0,\r\n            [\r\n                // The left character of the menu\r\n                props.left_column_style + // \"|\"\r\n\r\n                // The menu padding, before the item\r\n                (_remove_padding ? \"\" : ' '.repeat(props.padding)) +\r\n\r\n                // The selected item render output\r\n                item + // \"  Item  \"\r\n\r\n                // The menu padding, after the item\r\n                (_remove_padding ? \"\" : ' '.repeat(props.padding)) +\r\n                \r\n                // The right character of the menu\r\n                props.right_column_style // \"|\"\r\n            ]\r\n        ]\r\n    }\r\n\r\n}","\r\nimport { createInterface } from \"readline\";\r\nimport { Color } from '../helpers/rendering';\r\nimport { setCursorPosition } from '../classes/console-utils';\r\nimport MenuCore, { MenuPropertys } from \"../structs/menu-core\";\r\nimport renderScreenBuffer, { RenderableLine, ScreenBuffer, ScreenCache } from \"../classes/screen\";\r\nimport MenuHeader from \"../items/natives/menu-header\";\r\nimport MenuFooter from '../items/natives/menu-footer';\r\nimport MenuItem from '../structs/menu-item';\r\n\r\n/** Initialize the stdin for us */\r\ncreateInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n})\r\n\r\nexport default class Menu extends MenuCore {\r\n\r\n    private readonly _menu_header: MenuHeader;\r\n    private readonly _menu_footer: MenuFooter;\r\n    \r\n    private _cache?: ScreenCache = undefined\r\n\r\n    constructor(\r\n        private readonly _title: string = \"Default Menu Title\",\r\n        props: Partial<MenuPropertys> = {}\r\n    ) {\r\n        super(props);\r\n\r\n        this._menu_header = new MenuHeader(this._title)\r\n        this._menu_header.menu = this\r\n        \r\n        this._menu_footer = new MenuFooter()\r\n        this._menu_footer.menu = this\r\n\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.moveSelection(false)\r\n        process.stdin.on('keypress', this._on_key_down.bind(this))\r\n    }\r\n\r\n    public dispose() {\r\n        process.stdin.off('keypress', this._on_key_down)\r\n        this.lock()\r\n        this.hide();\r\n    }\r\n\r\n\r\n    protected _hide(): void {\r\n\r\n        if(!this._cache) return;\r\n\r\n        const hidden_buffer: ScreenBuffer = []\r\n\r\n        for(const line of this._cache.buffer_cache) {\r\n            hidden_buffer.push([\r\n                0,\r\n                [\r\n                    ' '.repeat(line)\r\n                ]\r\n            ])\r\n        }\r\n\r\n        renderScreenBuffer(hidden_buffer)\r\n        setCursorPosition(0, 0)\r\n    }\r\n\r\n    protected _show(): void {\r\n        this.render()\r\n    }\r\n\r\n    public render(width: number = this.propertys.minimal_width): void {\r\n\r\n        if(this._is_menu_hidden) return;\r\n\r\n        const buffer: ScreenBuffer = []\r\n\r\n       // Rendering the menu header\r\n        \r\n        const [ header_width, ...rendered_menu_header ] = this._menu_header.render(width, this.propertys)\r\n        width = header_width\r\n\r\n        // if(rendered_menu_header[0][1][0].length > header_width) {\r\n        //     width = header_width\r\n        // }\r\n\r\n        const rendered_menu_footer = this._menu_footer.render(\r\n            this._message,\r\n            width,\r\n            this.propertys\r\n        )\r\n\r\n       // Rendering the menu footer\r\n        \r\n        for(const idx in this._items) {\r\n            \r\n            const item = this._items[idx]\r\n            const is_item_selected = (idx as any) == this._selected_item_idx;\r\n\r\n            const rendered_item = item.render(width)\r\n\r\n            if(rendered_item.length > width) {\r\n                return this.render(rendered_item.length)\r\n            }\r\n\r\n            buffer.push(\r\n                this._render(\r\n                    rendered_item,\r\n                    is_item_selected,\r\n                    item\r\n                )\r\n            )\r\n\r\n            // We don't want to add padding after the last item\r\n            // @ts-ignore\r\n            if(idx != this._items.length - 1) {\r\n                // Adding between items padding\r\n                for(let i = 0; i < this.propertys.between_items_padding; i++) {\r\n                    buffer.push(\r\n                        this._render(\r\n                            this.propertys.between_items_style.repeat(width),\r\n                            false\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        // Redner the menu\r\n        this._cache = renderScreenBuffer([\r\n            // The header of the menu\r\n            ...rendered_menu_header,\r\n\r\n            // // Rendered Items\r\n            ...buffer,\r\n\r\n            // // Rendered Footer\r\n            ...rendered_menu_footer\r\n        ], { curser_under_screen: true, cache: this._cache })\r\n    }\r\n\r\n\r\n    private _render(rendered_data: string, is_selected: boolean, item?: MenuItem): RenderableLine {\r\n\r\n        return [\r\n            0,\r\n            [\r\n                // The left character of the menu\r\n                this.propertys.left_column_style ?? \"|\", // \"|\"\r\n                ...(\r\n                    is_selected ? (\r\n                        [\r\n                            [\r\n                                Color.BACKGROUND_BLUE | Color.BACKGROUND_GREEN | Color.BACKGROUND_RED,\r\n                                // The menu padding, before the item\r\n                                ' '.repeat(this.propertys.padding) +\r\n                \r\n                                // The selected item render output\r\n                                rendered_data + // \"  Item  \"\r\n                \r\n                                // The menu padding, after the item\r\n                                ' '.repeat(this.propertys.padding)\r\n                            ]\r\n                        ]\r\n                    ) : (\r\n                        [\r\n                            \r\n                            // The menu padding, before the item\r\n                            ' '.repeat(this.propertys.padding),\r\n\r\n                            (\r\n                                item?.isDisabled ? (\r\n                                    [\r\n                                        8 /** 8 for gray */,\r\n                                        // The selected item render output\r\n                                        rendered_data // \"  Item  \"\r\n                                    ]\r\n                                ) : (\r\n                                    rendered_data\r\n                                ) as string\r\n                            ),\r\n                     \r\n                            // The menu padding, after the item\r\n                            ' '.repeat(this.propertys.padding)\r\n                        \r\n                        ]\r\n                    )\r\n                ) as string[],\r\n\r\n                // The right character of the menu\r\n                this.propertys.right_column_style + // \"|\"\r\n    \r\n                // Selected item indicator\r\n                (is_selected ? \" <--\" : \"\") // \" <-\" or \"\"\r\n            ],\r\n        ]\r\n    }\r\n\r\n}\r\n","import Menu from \"../menus/menu\";\r\nimport { byteOnly } from \"../helpers/rendering\";\r\nimport MenuCore from \"../structs/menu-core\";\r\nimport MenuItem, { MenuItemProps } from \"../structs/menu-item\";\r\nimport Button from \"./button\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport interface SubMenuProps extends Omit<MenuItemProps, 'onClicked'> {\r\n    onClicked: (this: SubMenu) => void,\r\n}\r\n\r\n\r\nexport default class SubMenu extends MenuItem {\r\n\r\n    public get subMenu() {\r\n        return this._render_menu;\r\n    }\r\n\r\n    constructor(\r\n        label: string,\r\n        private readonly _render_menu: MenuCore = new Menu(label),\r\n        propertys: Partial<SubMenuProps> = {}\r\n\r\n    ) {\r\n        super(label, propertys as any)\r\n        \r\n        this._render_menu.lock()\r\n        this._render_menu.append(new Button(\"Return\", {\r\n            onClicked: () => {\r\n                this.hide()\r\n            },\r\n        }))\r\n\r\n        this._render_menu.initialize()\r\n    }\r\n\r\n    public render(width: number) {\r\n        \r\n        const label = this.label\r\n        const rightIcon = '[<]'\r\n\r\n        let spaces = byteOnly(\r\n            width - label.length\r\n        ) / 2\r\n        \r\n        return (\r\n            ' '.repeat(spaces + (\r\n                    label.length % 2 == 1 ? 1 : 0\r\n                )\r\n            ) +\r\n            label +\r\n            ' '.repeat(spaces - rightIcon.length) + rightIcon\r\n        )\r\n    }\r\n\r\n    public show() {\r\n\r\n        this.menu.lock();\r\n        this.menu.hide();\r\n\r\n        this._render_menu.show();\r\n        this._render_menu.unlock();\r\n        this._render_menu.render()\r\n\r\n    }\r\n\r\n    public hide() {\r\n        \r\n        this._render_menu.lock();\r\n        this._render_menu.hide();\r\n\r\n        process.nextTick(() => {\r\n            this.menu.unlock();\r\n            this.menu.show();\r\n        })\r\n\r\n    }\r\n\r\n    public onClicked() {\r\n        super.onClicked();\r\n        this.show();\r\n    }\r\n\r\n}","import Button from './items/button';\r\nimport CheckButton from './items/check-button';\r\nimport SubMenu from './items/sub-menu';\r\nimport Menu from './menus/menu';\r\n\r\n\r\nmodule.exports = Menu   \r\nmodule.exports.Button = Button\r\nmodule.exports.CheckButton = CheckButton\r\nmodule.exports.SubMenu = SubMenu\r\nmodule.exports.Menu = Menu\r\n\r\nexport {\r\n    Button,\r\n    CheckButton,\r\n    SubMenu,\r\n    Menu\r\n}"],"names":["Color","kernal","ffi","GetStdHandle","SetConsoleTextAttribute","GetConsoleScreenBufferInfo","RenderColor","color","this","create","Number","split","_proto","toString","getCurrentColor","handle","buff","Buffer","alloc","readInt32LE","applyColor","toggle","_is_applyed","end","apply","_default_attributes","byteOnly","n","Math","max","centerString","str","width","spaces","length","repeat","MenuItem","_label","propertys","Object","assign","is_countless","onClicked","onKeyDown","key","disabled","disable","_is_disabled","_menu","render","enable","bind","Error","value","val","_id","_this$_id","Button","label","props","_MenuItem","CheckButton","_this","_checked","checked","setCursorPosition","x","y","process","stdout","cursorTo","format","data","obj","replace","match","MenuCore","left_column_style","right_column_style","header_style","bottom_row_style","between_items_style","padding","between_items_padding","message_item_selected","message_item_format","minimal_width","showMessage","message","timeout","_message","clearTimeout","_message_timeout_tmo","setTimeout","clearMessage","_on_key_down","keydat","_is_menu_locked","name","moveSelection","index","_selected_item_idx","current_selected_item","lock","unlock","clear","_hide","_show","hide","_is_menu_hidden","show","append","item","at","_items","splice","indexOf","push","id","ITEM_TYPE","menu","remove","up","_this$current_selecte","isDisabled","isEnabled","_item3","_item4","_item5","_item6","currentItemIndex","getItem","initialize","renderScreenBuffer","buffer","options","height","mouseY","readInt16LE","cache","buffer_cache","cache_rendered_lines","current_line","_current_point","current_str","is_color","Array","write","i","MenuHeader","header_label","_render","_remove_padding","MenuFooter","log","footer_labels","wrap","map","lbl","max_length","reduce","prev","cur","createInterface","input","stdin","output","Menu","_title","undefined","_menu_header","_menu_footer","on","dispose","off","_cache","hidden_buffer","header_width","rendered_menu_header","rendered_menu_footer","idx","is_item_selected","rendered_item","curser_under_screen","rendered_data","is_selected","BACKGROUND_BLUE","BACKGROUND_GREEN","BACKGROUND_RED","SubMenu","_render_menu","nextTick","_this2","module","exports"],"mappings":"w3BAsBO,IAOKA,EAPCC,EAASC,UAAY,WAAY,CAC1CC,aAAgB,CAAC,MAAO,CAAC,QACzBC,wBAA2B,CAAC,MAAO,CAAC,MAAO,QAC3CC,2BAA8B,CAAC,MAAO,CAAC,MAAO,eAIlD,SAAYL,GACRA,yCACAA,2CACAA,uCACAA,mDACAA,0CACAA,4CACAA,wCACAA,qDACAA,2DACAA,6DACAA,kEACAA,gEACAA,gEACAA,+DACAA,yDAfJ,CAAYA,IAAAA,WAkBCM,aAKT,WACoBC,GAAAC,WAAAD,EAHZC,kBAAuB,EAHnCF,EASkBG,OAAP,SAAcF,GACjB,OAAO,IAAID,EAA6B,iBAAVC,EAAqBG,OAAOH,EAAMI,MAAM,MAAM,GAAGA,MAAM,KAAK,IAAMJ,IAVxG,kBAAA,OAAAK,EAaWC,SAAA,WACH,iBAAkBL,KAAKD,YAd/BD,EAiBmBQ,gBAAP,WACJ,IAAMC,EAASd,EAAOE,cAA4C,IAE5Da,EAAOC,OAAOC,MAAM,IAK1B,OAFAjB,EAAOI,2BAA2BU,EAAQC,GAEnCA,EAAKG,YAAY,IAzBhCb,EA4BkBc,WAAP,SAAkBb,GACrB,IAAMQ,EAASd,EAAOE,cAA4C,IAE5Da,EAAOC,OAAOC,MAAM,IAO1B,OAJAjB,EAAOI,2BAA2BU,EAAQC,GAE1Cf,EAAOG,wBAAwBW,EAAQR,GAEhCS,EAAKG,YAAY,IAtChCP,EAyCWS,OAAA,WACCb,KAAKc,YACLd,KAAKe,MAELf,KAAKgB,QAEThB,KAAKc,aAAed,KAAKc,aA/CjCV,EAkDWY,MAAA,WACHlB,EAAYc,WAAWZ,KAAKD,QAnDpCK,EAsDWW,IAAA,WACHjB,EAAYc,WAAWd,EAAYmB,oCAM3BC,EAASC,GACrB,OAAOC,KAAKC,IAAIF,GAAIA,YAGRG,EAAaC,EAAaC,GACtC,IAAIC,EAASP,EACTM,EAAQD,EAAIG,QACZ,EAEJ,MACI,IAAIC,OAAOF,GACHF,EAAIG,OAAS,GAAK,EAAI,EAAI,IAGlCH,EACA,IAAII,OAAOF,GA1ED3B,sBAA8BA,EAAYQ,sBClC9BsB,aAoB1B,WACYC,EACRC,YAAAA,IAAAA,EAAoC,IAD5B9B,YAAA6B,EAlBH7B,eAAoB,eACnBA,mBAAwB,EAoB9BA,KAAK8B,UAAYC,OAAOC,OAAwC,CAC5DC,cAAc,EACdC,UAAW,aACXC,UAAW,SAACC,KACZC,UAAU,GACXP,GAEA9B,KAAK8B,UAAUO,UACdrC,KAAKsC,qCAgCNA,QAAA,WACHtC,KAAKuC,cAAe,EACjBvC,KAAKwC,OACJxC,KAAKwC,MAAMC,YAIZC,OAAA,WACH1C,KAAKuC,cAAe,EACjBvC,KAAKwC,OACJxC,KAAKwC,MAAMC,YAIZN,UAAA,SAAUC,GACbpC,KAAK8B,UAAUK,UAAUQ,KAAK3C,KAA9BA,CAAoCoC,MAGjCF,UAAA,WAEH,OAAOlC,KAAK8B,UAAUI,UAAUS,KAAK3C,iCAMlCyC,OAAA,SAAOjB,GACV,MAAM,IAAIoB,MAAM,uEA/EpB,WACI,OAAO5C,KAAK6B,YAGhB,SAAiBgB,GACb7C,KAAK6B,OAASgB,0BAoBlB,WACI,OAAO7C,KAAKuC,+BAGhB,WACI,IAAIvC,KAAKwC,MACL,MAAM,IAAII,MAAM,8EAEpB,OAAO5C,KAAKwC,WAGhB,SAAgBM,GACR9C,KAAKwC,QACLxC,KAAKwC,MAAQM,mBAIrB,WACI,OAAO9C,KAAK+C,SAGhB,SAAcD,kBACN9C,KAAK+C,MAALC,EAAUtB,SACV1B,KAAK+C,IAAMD,YC/DFG,cAGjB,WACIC,EACAC,mBAAAA,IAAAA,EAA8B,IAC9BC,YAAMF,EAAOC,mCAEVV,OAAA,SAAOjB,GACV,OAAOF,EAAatB,KAAKkD,MAAO1B,OATJI,GCKfyB,cAQjB,WACIH,EACAC,2BAAAA,IAAAA,EAAmC,KAEnCG,cAAMJ,EAAOC,oBAVW,EAWxBG,EAAKC,kBAAWJ,EAAMK,gDAInBf,OAAA,SAAOjB,GAEV,IAAMgC,EAAUxD,KAAKuD,SAAW,MAAQ,MAEpC9B,EAASP,EACTM,EAAQxB,KAAKkD,MAAMxB,QACnB,EAEJ,MACI,IAAIC,OAAOF,GACPzB,KAAKkD,MAAMxB,OAAS,GAAK,EAAI,EAAI,IAGrC1B,KAAKkD,MACL,IAAIvB,OAAOF,EAAS+B,EAAQ9B,QAAU8B,KAKvCtB,UAAA,WACHlC,KAAKuD,UAAYvD,KAAKuD,SACtBH,YAAMlB,oBAAUlC,KAAKuD,mCAlCzB,WACI,OAAOvD,KAAKuD,gBALqB3B,YCTzB6B,EAAkBC,EAAWC,GACzCC,QAAQC,OAAOC,SAASJ,EAAGC,YCCPI,EAAyBC,EAAcC,GAC3D,OAAOD,EAAKE,QAAQ,iBAAiB,SAACC,EAAO/B,SAEzC,gBAAO6B,EAAI7B,MAAQ,UCiBGgC,aAuB1B,WACItC,YAAAA,IAAAA,EAAoC,IAnB9B9B,yBAA8B,EAC9BA,YAAqB,GACrBA,cAAmB,GAGnBA,sBAA2B,EAC3BA,sBAA2B,EAejCA,KAAK8B,UAAYC,OAAOC,OAAwC,CAE5DqC,kBAAmB,IACnBC,mBAAoB,IAEpBC,aAAc,IACdC,iBAAkB,IAElBC,oBAAqB,IAErBC,QAAS,EACTC,sBAAuB,EAEvBC,uBAAuB,EACvBC,oBAAqB,yBAErBC,cAAe,GAEhBhD,8BAMAiD,YAAA,SAAYC,EAAiBC,uBAAAA,IAAAA,GAAmB,GACnDjF,KAAKkF,SAAWF,EAChBhF,KAAKyC,SACFwC,EAAU,IACTE,aAAanF,KAAKoF,sBAClBpF,KAAKoF,qBAAuBC,YAAW,WACnC/B,EAAKgC,eACLhC,EAAKb,WACNwC,OAOJK,aAAA,WACHtF,KAAK+E,YAAY,IAAK,MAGhBQ,aAAA,SAAaC,EAA4BpD,GAE5CpC,KAAKyF,kBAEO,QAAZrD,EAAIsD,MACH1F,KAAK2F,eAAc,GAEhB3F,KAAK8B,UAAU8C,sBACd5E,KAAK+E,YACDhB,EACI/D,KAAK8B,UAAU+C,oBACf,CAAEe,MAAO5F,KAAK6F,sBAGrB7F,KAAKyC,UAEQ,MAAZL,EAAIsD,MACV1F,KAAK2F,eAAc,GAEhB3F,KAAK8B,UAAU8C,sBACd5E,KAAK+E,YACDhB,EACI/D,KAAK8B,UAAU+C,oBACf,CAAEe,MAAO5F,KAAK6F,sBAGrB7F,KAAKyC,UAEQ,SAAbL,EAAIsD,OACN1F,KAAK8F,uBACJ9F,KAAK8F,sBAAsB5D,YAE/BlC,KAAKyC,cAONsD,KAAA,WACH/F,KAAKyF,iBAAkB,KAMpBO,OAAA,WACHhG,KAAKyF,iBAAkB,KAGpBQ,MAAA,WACH,MAAM,IAAIrD,MAAM,6CAGVsD,MAAA,WACN,MAAM,IAAItD,MAAM,6CAGVuD,MAAA,WACN,MAAM,IAAIvD,MAAM,6CAGbwD,KAAA,WAECpG,KAAKqG,kBACLrG,KAAKqG,iBAAkB,EACvBrG,KAAKkG,YAINI,KAAA,WACAtG,KAAKqG,kBACJrG,KAAKqG,iBAAkB,EACvBrG,KAAKmG,YAQNI,OAAA,SAAOC,EAAgBC,GACV,iBAANA,EACNzG,KAAK0G,OAAOC,OAAOF,EAAI,EAAGD,GACpBC,aAAc7E,EACpB5B,KAAK0G,OAAOC,OAAO3G,KAAK0G,OAAOE,QAAQH,GAAK,EAAGD,GAE/CxG,KAAK0G,OAAOG,KAAKL,GAGrBA,EAAKM,GAAKN,EAAKO,UAAY,KAAO/G,KAAK0G,OAAOE,QAAQJ,GACtDA,EAAKQ,KAAOhH,QAMTiH,OAAA,SAAOT,GACVxG,KAAK0G,OAAOC,OAAO3G,KAAK0G,OAAOE,QAAQJ,GAAO,MAG3Cb,cAAA,SAAcuB,SAEjBlH,KAAK6F,oBAAsBqB,GAAM,EAAI,EAClClH,KAAK6F,mBAAqB,EACzB7F,KAAK6F,mBAAqB7F,KAAK0G,OAAOhF,OAAS,EACzC1B,KAAK6F,oBAAsB7F,KAAK0G,OAAOhF,SAC7C1B,KAAK6F,mBAAqB,YAG3B7F,KAAK8F,wBAALqB,EAA4BC,YAC3BpH,KAAK2F,cAAcuB,MAQpB5E,QAAA,SAAQkE,SACO,iBAARA,IACNA,EAAOxG,KAAK0G,OAAOF,aAGvBA,YAAMlE,WAAAA,aAMHI,OAAA,SAAO8D,SACQ,iBAARA,IACNA,EAAOxG,KAAK0G,OAAOF,aAGvBA,YAAM9D,UAAAA,YAMH2E,UAAA,SAAUb,WAKb,MAJkB,iBAARA,IACNA,EAAOxG,KAAK0G,OAAOF,IAGY,2BAArBA,UAAAc,EAAMF,wBAA4BZ,IAAAe,EAAMH,eAMnDA,WAAA,SAAWZ,WAKd,MAJkB,iBAARA,IACNA,EAAOxG,KAAK0G,OAAOF,IAGY,2BAArBA,UAAAgB,EAAMJ,uBAA2BZ,UAAAiB,EAAML,eAMlDM,iBAAA,WACH,OAAO1H,KAAK6F,sBAOT8B,QAAA,SAAQ/B,GACX,OAAO5F,KAAK0G,OAAOd,MAOhBgC,WAAA,WACH,MAAM,IAAIhF,MAAM,8CAMbH,OAAA,WACH,MAAM,IAAIG,MAAM,kFAjPpB,WACI,OAAO5C,KAAK0G,OAAO1G,KAAK6F,mDAG5B,WACI,OAAO7F,KAAK6F,qCCtBIgC,EAAmBC,EAAsBC,YAAAA,IAAAA,EAAyB,IAEtF,IHjBMxH,EACAC,EGgBFwH,EAAS,EACTC,GHlBE1H,EAASd,EAAOE,cAA4C,IAC5Da,EAAOC,OAAOC,MAAM,IAG1BjB,EAAOI,2BAA2BU,EAAQC,GAEnC,CAAEkD,EAAGlD,EAAK0H,YAAY,GAA4BvE,EAAGnD,EAAK0H,YAAY,KGY5CvE,EAE7BoE,EAAQI,QACRJ,EAAQI,MAAQ,CAAEC,aAAc,KAMpC,IAFA,IAAMC,EAAiC,GAEjCL,EAASF,EAAOpG,QAAQ,CAE1B2G,EAAqBL,GAAU,EAE/B,IAAMM,EAAqBR,EAAOE,GAG9BO,GAAkB,EAItB,IAFA9E,EAAkB,EAAGuE,EAAOC,GAEtBK,EAAa,GAAG5G,SAAW6G,GAAgB,CAE7C,IAAMC,EAAcF,EAAa,GAAGC,GAC9BE,EAAcD,aAAuBE,MAE3CL,EAAqBL,IAAWS,EAC5BD,EAAY,GAAG9G,OAEf8G,EAAY9G,OAGb+G,GAEC3I,EAAYc,WAAW4H,EAAY,IAGvC5E,QAAQC,OAAO8E,MAEXF,EAAWD,EAAY,GAAKA,GAG7BC,GACC3I,EAAYc,WAAWd,EAAYmB,qBAIxCoH,EAAqBL,GAAUD,EAAQI,MAAMC,aAAaJ,IACzDpE,QAAQC,OAAO8E,MACX,IAAIhH,OACAoG,EAAQI,MAAMC,aAAaJ,GAAUK,EAAqBL,GAAU,IAKhFA,IAGJ,GAAGK,EAAqB3G,OAASqG,EAAQI,MAAMC,aAAa1G,OACxD,IAAI,IAAIkH,EAAIP,EAAqB3G,OAAQkH,EAAIb,EAAQI,MAAMC,aAAa1G,OAAQkH,IAC5EnF,EAAkB,EAAGuE,KACrBpE,QAAQC,OAAO8E,MACX,IAAIhH,OACAoG,EAAQI,MAAMC,aAAaQ,KAY3C,OAFAnF,EAAkB,EAAGwE,GAEd,CAAEG,aAAcC,GDzEAjE,YAAoB,mBErB1ByE,cAEjB,WACqBhH,gBAEjByB,cAAM,kBAFWzB,sCAMdY,OAAA,SAAOjB,EAAe2B,GAEzB,IAAM2F,EAAexH,EAAatB,KAAK6B,OAAQL,GAE/C,MAAO,CAEHsH,EAAapH,OAEb1B,KAAK+I,QACD,IAAIpH,OAAOmH,EAAapH,OAAyB,EAAhByB,EAAMuB,SACvCvB,GACA,GAGJnD,KAAK+I,QACDD,EACA3F,GAGJnD,KAAK+I,QACD,IAAIpH,OAAOmH,EAAapH,OAA0B,EAAhByB,EAAMuB,SACxCvB,GACA,OAKJ4F,QAAA,SAAQvC,EAAcrD,EAAsB6F,GAChD,MAAO,CACH,EACA,CAEI7F,EAAMkB,mBAGL2E,EAAkB,GAAK,IAAIrH,OAAOwB,EAAMuB,UAGzC8B,GAGCwC,EAAkB,GAAK,IAAIrH,OAAOwB,EAAMuB,UAGzCvB,EAAMmB,yBArDkB1C,GCDnBqH,cAEjB,oBAEI7F,YAAM,4CAIHX,OAAA,SAAOyG,EAAa1H,EAAe2B,cAEhCgG,EAAgBC,EAAKF,EAAK,CAAE1H,MAAOA,EAAyB,EAAhB2B,EAAMuB,UAAgBvE,MAAM,MAAMkJ,KAAI,SAAAC,GAAG,OAAIhI,EAAagI,EAAK9H,MAG7G+H,EAAaJ,EAAcK,QAAO,SAACC,EAAMC,GAAP,OAAetI,KAAKC,IAAIoI,EAAK/H,OAAQgI,EAAIhI,WAQ/E,MANyB,iBAAf6H,IAENA,EAAaA,EAAW7H,SAKxB1B,KAAK+I,QACD,IAAIpH,OAAO4H,EAA6B,EAAhBpG,EAAMuB,SAC9BvB,GACA,WAGDgG,EAAcE,KAAI,SAAAnG,GAAK,OAAII,EAAKyF,QAAQ7F,EAAOC,OAElDnD,KAAK+I,QACD,IAAIpH,OAAO4H,EAA8B,EAAhBpG,EAAMuB,SAC/BvB,GACA,QAKJ4F,QAAA,SAAQvC,EAAcrD,EAAsB6F,GAChD,MAAO,CACH,EACA,CAEI7F,EAAMkB,mBAGL2E,EAAkB,GAAK,IAAIrH,OAAOwB,EAAMuB,UAGzC8B,GAGCwC,EAAkB,GAAK,IAAIrH,OAAOwB,EAAMuB,UAGzCvB,EAAMmB,yBAvDkB1C,GCCxC+H,kBAAgB,CACZC,MAAOhG,QAAQiG,MACfC,OAAQlG,QAAQC,aAGCkG,cAOjB,WACqBC,EACjB7G,yBADiB6G,IAAAA,EAAiB,+BAClC7G,IAAAA,EAAgC,KAEhCG,cAAMH,iBAHW6G,EAHb1G,cAAuB2G,EAQ3B3G,EAAK4G,aAAe,IAAIrB,EAAWvF,EAAK0G,QACxC1G,EAAK4G,aAAalD,UAElB1D,EAAK6G,aAAe,IAAIlB,EACxB3F,EAAK6G,aAAanD,8CAIfY,WAAA,WACH5H,KAAK2F,eAAc,GACnB/B,QAAQiG,MAAMO,GAAG,WAAYpK,KAAKuF,aAAa5C,KAAK3C,UAGjDqK,QAAA,WACHzG,QAAQiG,MAAMS,IAAI,WAAYtK,KAAKuF,cACnCvF,KAAK+F,OACL/F,KAAKoG,UAICF,MAAA,WAEN,GAAIlG,KAAKuK,OAAT,CAIA,IAFA,MAAMC,EAA8B,yrBAElBxK,KAAKuK,OAAOnC,6BAC1BoC,EAAc3D,KAAK,CACf,EACA,CACI,IAAIlF,mBAKhBkG,EAAmB2C,GACnB/G,EAAkB,EAAG,OAGf0C,MAAA,WACNnG,KAAKyC,YAGFA,OAAA,SAAOjB,GAEV,YAFUA,IAAAA,EAAgBxB,KAAK8B,UAAUgD,gBAEtC9E,KAAKqG,gBAAR,CAEA,IAAMyB,EAAuB,KAIqB9H,KAAKkK,aAAazH,OAAOjB,EAAOxB,KAAK8B,WAA/E2I,OAAiBC,aAOnBC,EAAuB3K,KAAKmK,aAAa1H,OAC3CzC,KAAKkF,SAPT1D,EAAQiJ,EASJzK,KAAK8B,WAKT,IAAI,IAAM8I,KAAO5K,KAAK0G,OAAQ,CAE1B,IAAMF,EAAOxG,KAAK0G,OAAOkE,GACnBC,EAAoBD,GAAe5K,KAAK6F,mBAExCiF,EAAgBtE,EAAK/D,OAAOjB,GAElC,GAAGsJ,EAAcpJ,OAASF,EACtB,OAAOxB,KAAKyC,OAAOqI,EAAcpJ,QAarC,GAVAoG,EAAOjB,KACH7G,KAAK+I,QACD+B,EACAD,EACArE,IAMLoE,GAAO5K,KAAK0G,OAAOhF,OAAS,EAE3B,IAAI,IAAIkH,EAAI,EAAGA,EAAI5I,KAAK8B,UAAU6C,sBAAuBiE,IACrDd,EAAOjB,KACH7G,KAAK+I,QACD/I,KAAK8B,UAAU2C,oBAAoB9C,OAAOH,IAC1C,IAQpBxB,KAAKuK,OAAS1C,YAEP6C,EAGA5C,EAGA6C,GACJ,CAAEI,qBAAqB,EAAM5C,MAAOnI,KAAKuK,aAIxCxB,QAAA,SAAQiC,EAAuBC,EAAsBzE,SAEzD,MAAO,CACH,YAGIxG,KAAK8B,UAAUuC,qBAAqB,YAEhC4G,EACI,CACI,CACIzL,EAAM0L,gBAAkB1L,EAAM2L,iBAAmB3L,EAAM4L,eAEvD,IAAIzJ,OAAO3B,KAAK8B,UAAU4C,SAG1BsG,EAGA,IAAIrJ,OAAO3B,KAAK8B,UAAU4C,WAIlC,CAGI,IAAI/C,OAAO3B,KAAK8B,UAAU4C,eAGtB8B,GAAAA,EAAMY,WACF,CACI,EAEA4D,GAGJA,EAKR,IAAIrJ,OAAO3B,KAAK8B,UAAU4C,WAOtC1E,KAAK8B,UAAUwC,oBAGd2G,EAAc,OAAS,WAlLN7G,GCEbiH,cAMjB,WACInI,EACiBoI,EACjBxJ,yBADiBwJ,IAAAA,EAAyB,IAAIvB,EAAK7G,aACnDpB,IAAAA,EAAmC,KAGnCwB,cAAMJ,EAAOpB,uBAJIwJ,EAMjBhI,EAAKgI,aAAavF,OAClBzC,EAAKgI,aAAa/E,OAAO,IAAItD,EAAO,SAAU,CAC1Cf,UAAW,WACPoB,EAAK8C,WAIb9C,EAAKgI,aAAa1D,iDAGfnF,OAAA,SAAOjB,GAEV,IAAM0B,EAAQlD,KAAKkD,MAGfzB,EAASP,EACTM,EAAQ0B,EAAMxB,QACd,EAEJ,MACI,IAAIC,OAAOF,GACHyB,EAAMxB,OAAS,GAAK,EAAI,EAAI,IAGpCwB,EACA,IAAIvB,OAAOF,EAZG,MAYgBC,QAZhB,SAgBf4E,KAAA,WAEHtG,KAAKgH,KAAKjB,OACV/F,KAAKgH,KAAKZ,OAEVpG,KAAKsL,aAAahF,OAClBtG,KAAKsL,aAAatF,SAClBhG,KAAKsL,aAAa7I,YAIf2D,KAAA,sBAEHpG,KAAKsL,aAAavF,OAClB/F,KAAKsL,aAAalF,OAElBxC,QAAQ2H,UAAS,WACbC,EAAKxE,KAAKhB,SACVwF,EAAKxE,KAAKV,aAKXpE,UAAA,WACHkB,YAAMlB,qBACNlC,KAAKsG,gCAlET,WACI,OAAOtG,KAAKsL,oBAHiB1J,GCZrC6J,OAAOC,QAAU3B,EACjB0B,OAAOC,QAAQzI,OAASA,EACxBwI,OAAOC,QAAQrI,YAAcA,EAC7BoI,OAAOC,QAAQL,QAAUA,EACzBI,OAAOC,QAAQ3B,KAAOA"}